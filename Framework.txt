 Framework : A framework is a code liberary that makes web developement quicker and easier by giving basic patterns for building 
             reliable, scalable and maintable web application.

1. Framework provides generic structure(base) upon which web application can be developed.
2. It allows you to focus on application logic rather than spendingt time to create things from scratch.
3. provides security to your apllication, so need for so to security code for your apllication
since it provides generic sytructure, code maintaibility become easy

To create apllication :- front-end, backend, database

- Template folder :- store HTML file (logic)
- python files :-     veiws.py file
- Model : -           models.py file
- static folder :      css/js/images

What is Django:
Django is free and open source framework, that is written in python. 

-----  Features of dJango framework ----------

1. Battery included approch
2. Rapid developement
3. security
4. Scalable
5. Admin Interafce
6. Rest framework for API

=========================================================================================================================================

1. Download Python :- www.python.org
install --> select both options for future scope

2. virtual environment installation : we are able to access python in diff cmd prompt as python is there in entire window environment.
   
 === Steps : ====

    1. install module virtualenv :-    pip install virtualenv   ------------> globally
    2. create folder :-
          My_django12

    3. give folder path in cmd :-
          D:\>cd My_django12

    4. create virtual environment in that working project :- virtualenv environment_name
        eg. :-  D:\My_django12>virtualenv env 
          
       
    5. Activate virtual environment :- env\scripts\activate (for activate) , env\scripts\deactivate (for deactivate)
       eg. :-  D:\My_django12>env\scripts\activate
       eg. :-  (env) D:\My_django12>env\scripts\deactivate

   
    6.  Create one more folder  ---> project
        give  directory ---->    (env) D:\My_django12>cd project


---------------------- Django installation ----------------------------------------------------------------------------

    7. install django in virtual environment :-   pip install django
         eg. :- (env) D:\My_django12\project>pip install django
         
          - cheak django version :- django-admin --version
          - above command will install latest version of django, if you want to install django of previous version, then the command is:- 
                 (env) D:\My_django12\project>pip install "django>=4.2.5,<4.2.7"  ---> it will give  4.2.6
                 (env) D:\My_django12\project>pip install "django>=4.2.5,<4.2.6"  ---> it will give 4.2.5

         

    8.  Create django project :-  django-admin startproject ecomm
          eg. :-   (env) D:\My_django12\project>django-admin startproject ecomm

         --> ecomm --> main project
              --> ecomm ---> project directory
              --> _______app directory
              --> template
              --> static 



=================================================================================================================================================


   ------ ---To run django project : ------------------------------------------------------------
       -  python manage.py runserver --------> will give error

   # Every time you need to activate environment and select folder directory to run the project.


       ----  select path :-
          (env) D:\My_django12\project\ecomm>python manage.py runserver
         
        =====> ( you will get link :-  http://127.0.0.1:8000   i.e link of web Application)=========


 ----------------------===== The install worked successfully! Congratulations! ====== ----------------------------------------------------------

 ctrl + c ---> to exit from running server


Command to create django app :-
-----------------------------------

=> django-admin startapp app_name 
  or
=> python manage.py startapp app_name

eg. :- (env) D:\My_django12\project\ecomm>django-admin startapp ecomm_app
( you will get ecomm_app folder )


---------------------------------------------------------------------------------------------------------------------------------------------------------

vs code :- 
- select folder , and the project 

=============================================================================================================================================


    MVT architechture-function creation-url mapping :-
     -------------------------------------------------

  Model : - it is representative of database table in the django framework.
 -------
          - if you require 10 tables ---> 10 models (Each table in the database has a model)
   
          - No. of tables in database = No. of models in django.

 
  view :-  main Logic
 ------- 
          - views provide response with the help of function,
          syntax: 
                 def functionName(request):
                       body of function

                       return response

 

  Template :- Templates are HTML files.
-----------

 
             Template <---> views <---> Model

eg. User fills form (Template):-
 - User will store that data into database table.
 - Template --> Views ---> Model

eg. Retrive data from Model and and display it to User :-
  - Template <------Views <----- Model


=======================================================================================================================================

     URL Mapping :-
    --------------
- client always send request to the server & server will return response to the client.

- client request :- url in address bar of the browser 
 1) Manual type URL
 2) achor tag, give url in address (/)
 3) while sending form in action ="" attribute

<form method="post" action="/contact">
</form>

steps :-
-----------

 step 1:
         browser
         User ----> URL request -----> Django server

 step 2:
         when Django server receive request, it will serch for url in the urls.py file.
         eg. /home, /contact, /product

  - indirectly the Django server is mapping the comming url with existing url inthe urls.py file.
      eg. 
           /home ------> home fun
           /contact ---> contact fun
           /product ---> product fun

     i.e Django map url in urls.py file


 step 3: 
       to every url there is view function link which get invoked or called when that url is mapped.


==================================================================================================================================

 VS code :
  1. settings.py : register app
       add user defined files/app. (Install_apps)
    eg. 'ecomm_app' 

  2.  create function and url :-

   = views.py file : write basic function.
   = urls.py --> provide url

3. create urls.py file inside ecomm_app 
4. copy project urls file paste into app urls file , remove admin
5. keep admin only in project(ecomm) urls 
6. path('',include('ecomm_app.urls')) add this in project(ecomm) url, otherwise you will get 404 error
==================================================================================================================================================================

--------passing parameter/value to url----------------

sql query to delete specific record:
- delete from tablename where id=value;

eg: 127.0.0.1.8000/edit/3 

urls.py :-
-------
 path('edit/<pid>', views.edit_fun)


views.py :-
-------
def edit_fun(request,pid):
    return response

===========================================================================================================================================================================

class based view :
----------------------

step 1: import View class from django.views

step 2: define view class as function

	class ViewClassName(View):
     
   		def get(self,request):
     		    // body of method
                  return response

   		def post(self,request):
                   // body of method
                   return response

step 3 : write urls from class based view
          path('urlname,,ClassNameView.as_view())

response ------>
1) HttpResponse ----> function/class based view
2) render       ----> Template

=========================================================================================================================================================

Templates:
-----------

when you click on edit
Data specific to your student id is fetch from itvedant student database
- that data is merged with html edit page or structure or tenmplate and shown to you as a response.

- process of merging data from database with html template is called as rendering html.
	
1) send HTML file as response to the browser.
2) send file + data as a response to the browser.

step 1: Create a folder(Template) inside same hierarchy of ecomm :-'
    
       ecomm--
           ecomm
           ecomm-app
           manage.py
           templates

render function:-

syntax:
        return render(request,'html file',data)



step 2: Setting for template folder in setting.py file so that Template folder recognized by django to avoid TemplateNotFoundError.
       Templates=[
                 {
          'DIRS': [os.path.join(BASE_DIR,'templates')],
         }
        ]


Sending data to html file:
-----------------------------

  - HTML is taggging language, its not programming language.

in dynamic, web application where there is nnned to display the data , fetch from database table.

so there is need of variable in HTML

-------------------------------------------------------------------

 DTL :- Django Template language
-----------------------------

to implement the programming concept in HTML which is tagging language, there is need of DTL.

1. String interpolation
2. Decision control instructions
3. loop control instruction
4. Reusability
5. Template inheritance

--------------------------------------------------------------------------

- Data to HTML file is passed as dictionary, that data is accesssed with the help     of key in HTML file

syntax:
    {{key_name}}   -----> string interpolation




















----------------------------------------------------------------------------------------------------------------------------------------------------------------------
          

-- Decision control instructions:-
   ----------------------------------

{% if condition %}
    {# code to execute if the condition is true #}
{% elif another_condition %}
    {# code to execute if the 'elif' condition is true #}
{% else %}
    {# code to execute if none of the conditions are true #}
{% endif %}


e.g.
<!-- Determine the greater number -->
        {% if x > y %}   20>500
        <p>{{ x }} is greater than {{ y }}.</p>
        {% elif x < y %}
        <p>{{ y }} is greater than {{ x }}.</p>
        {% else %}
        <p>{{ x }} and {{ y }} are equal.</p>
        {% endif %}


e.g. 
  
<!-- Example Django template -->
{% if user.is_authenticated %}
    <p>Welcome, {{ user.username }}!</p>
{% elif user.is_anonymous %}
    <p>Please log in to access this content.</p>
{% else %}
    <p>Something unexpected happened.</p>
{% endif %}






































1. Base Template (base.html):

2. Include Tag:
             Use the {% include %} tag to include the base template in other templates.

3.Pass Arguments with Include:
            You can pass arguments to an included template.
   e.g. 
      <!-- included_template.html -->
      <p>{{ variable_passed }}</p>


4. Reusable List View Snippets:
       Use Django's built-in {% for %} loop to iterate over a list.

      e.g.
       <!-- list_view.html -->
       <ul>
       	 {% for item in items %}
         <li>{{ item }}</li>
         {% endfor %}
      </ul>

 5. Reverse for URLs:
       Use the {% url %} tag to reverse URLs.
e.g. 
     <a href="{% url 'app_name:view_name' arg1,arg2 %}">Link</a>

6. Navbar:
Implement your navbar in the base template.

7. Template Filters:
   Use filters to format data in templates.
e.g. 
     {{ variable|filter_name }}

8. ForLoop Counter & Cycle:
     Utilize the {% for %} loop's forloop.counter and forloop.cycle properties.
 e.g.
     {% for item in items %}
        <p>{{ forloop.counter }}. {{ item }} - {{ forloop.cycle 'odd' 'even' }}</p>
     {% endfor %}


9. emplate Inheritance/ Template Extending:
As shown above, use {% extends 'base.html' %} to inherit from the base template.

10. Static Files:
     Load static files using the {% load static %} tag.
e.g.
    <!-- included_template.html -->
    <link rel="stylesheet" href="{% static 'css/style.css' %}">





















 









          
        
      
      

 



 

